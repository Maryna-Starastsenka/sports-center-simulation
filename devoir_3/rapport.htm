<html>

<head>
  <title>IFT2255</title>
  <style type="text/css">
    table {
      border: outset 2px black;
      border-collapse: collapse;
    }

    th {
      border-bottom: double 2px black;
    }

    td {
      border-bottom: solid 1px black;
    }

    .first_col {
      border-right: double 2px black;
    }
  </style>
</head>

<body>
  <h1 style="text-align: center;">
    IFT 2255 - Devoir 3</h1>
  <h2>
    Information générale</h2>
  <p>
    <span style="font-weight: bold;">Nom : </span>Alex Defoy
    <br />
    <span style="font-weight: bold;">Matricule : </span>20131653
    <br />
    <span style="font-weight: bold;">Courriel : </span>alex.defoy@umontreal.ca
    <br />
    <span style="font-weight: bold;">Temps mis : </span>XX heures
  </p>
  <p>
    <span style="font-weight: bold;">Nom : </span>Maryna Starastsenka
    <br />
    <span style="font-weight: bold;">Matricule : </span>20166402
    <br />
    <span style="font-weight: bold;">Courriel : </span>maryna.starastsenka@umontreal.ca
    <br />
    <span style="font-weight: bold;">Temps mis : </span>XX heures
  </p>
  <h2>
    Distribution des tâches</h2>
  <p>
    <span style="font-weight: bold;">Soumetteur : Defoy Alex</span>
  </p>
  <table cellpadding="7px">
    <thead>
      <tr>
        <th class="first_col">
          Tâche
        </th>
        <th>
          Alex
        </th>
        <th>
          Maryna
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="first_col">
          Mise à jour des artéfacts
        </td>
        <td>
          Gestion des membres/Inscription séance/Confirmer Présence(50%)
        </td>
        <td>
          Gestion des services/Procédure comptable/Diagramme de classes(50%)
        </td>
      </tr>
      <tr>
        <td class="first_col">
          Implémentation en Java
        </td>
        <td>
          Gestion de services et séances/Application mobile/TEF(40%)
        </td>
        <td>
          Réorganisation de la structure/Gestion de membres/Vue(60%)
        </td>
      </tr>
      <tr>
        <td class="first_col">
          Tests unitaires
        </td>
        <td>
          Gestion des membres/Inscriptions/ConfirmerPresence(50%)
        </td>
        <td>
          Gestion des services/Mise à jour statut membre/authentifierClient(50%)
        </td>
      </tr>
      <tr>
        <td class="first_col">
          Livraison et documentation
        </td>
        <td>
          Manuel d'instruction/JAR(75%)
        </td>
        <td>
          JavaDoc(25%)
        </td>
      </tr>
    </tbody>
  </table>

<pre style="font-family: 'Open Sans';">


</pre>

  <h2>
    Tâche 1 : Mise à jour des artéfacts</h2>
    <pre style="font-family: 'Open Sans';">
        Workflow d'analyse :
            Peu de modifications ont été apportés aux artéfacts de l'analyse.
            Deux horloges ont été ajoutées au diagramme d'analyse principal pour les cas automatiques.
            La première étape de l'inscription à une séance est maintenant la vérification du numéro de membre plutôt que le choix de la séance.
            Dans le cas d'utilisation de la procédure comptable, on crée maintenant aussi un fichier TEF pour les membres.
            Pour ce qui est des informations supplémentaires demandées lors de l'inscription, ces changements n'ont pas d'impact sur l'analyse.
            L'application mobile n'est pas analysée dans ce workflow.
            <a href="rapportDevoir1.htm" title="Premier rapport">Lien vers le premier rapport</a>.</p>

        Workflow de conception :
            Beaucoup de modificiations ont été apportées à la conception.
            Avec l'ampleur des classes il a fallu en séparer beaucoup.
            Le logiciel a été séparé en trois paquets : vue, modèle, controleur.
            Les controleurs font le lien entre la vue et le modèle.
            Plusieurs classes vues ont été créées pour mieux fragmenter le code spécialiser les classes.
            Les Centres de données sont séparés en deux. Les séparer en plus de classes aurait augmenté le couplage.
            Les services ont maintenant un code de 3 chiffres qui ne dépendent que du nom du service.
            Les codes de séances ont maintenant 7 chiffres. Ils sont modifiés si le code de service change ou la journée de la séance change.
            <a href="rapportDevoir2.htm" title="Deuxième rapport">Lien vers le deuxième rapport</a>.</p>

    </pre>


    </pre>

  <h2>Tâche 2 : Implémentation en Java</h2>
  <pre style="font-family: 'Open Sans';">
    Les fonctions qui doivent être appelés automatiquement sont créées. Il n'y a par contre pas d'horloge qui les appels présentement.
    Il est possible d'appeler genererTef() et genererRapportSynthese dans la classe ControleurAdministration. Ces classes vont appeler
    des méthodes de la classe CentreDonneesService pour générer les rapports.
    Pour ce qui est de la modification du statut des membres. Une méthode est créer dans ControleurClient. La méthode s'appele
    modifierStatutMembre et reçoit en paramètres une HashMap qui contient les numéros des clients et un booléen qui représente si le
    membre est valide ou non.

    L'application mobile est fonctionnelle. Il est possible d'ajouter des inscriptions aux séances pour les membres et des confirmations de présence
    pour les professionnels. Le code QR est simulé avec le code membre.

    Voici un lien vers le fichier exécutable :  <a href="Main.jar" title="Fichier exécutable">lien</a>.
  </pre>



  <h2>Tâche 3 : Tests unitaires </h2>
   <pre style="font-family: 'Open Sans';">
    Des tests unitaires ont été faits pour les méthodes publiques suivantes:
        Demande d'accès au gym : ControleurClient.verifierTypeClient(type : TypeClient typeClient, idClient : String)
        Gestion des comptes : ControleurClient.creerClient(type : TypeClient, attributs)
                              ControleurClient.mettreClientAJour(type : TypeClient, id : String)
                              ControleurClient.supprimerClient(type : TypeClient, id : String)
        Mise à jour du statut des membres (RnB) : Controleur.modifierStatutMembre(liste : HashMap<String, Boolean>)
        Gestion des services : ControleurServices.creerService(attributs d'un service)
                               ControleurServices.mettreServicesAJour(id : String, champs : Champs, valeur : String)
                               ControleurServices.supprimerService(id : String)
        Inscription séance : ControleurServices.InscriptionSeance (idMembre : String, nom : String, idSeance : String)
        Confirmer présence à la séance : ControleurServices.ConfirmerPresence(idSeance : String, idMembre : String)

    Voici des liens vers chacune des classes de test :
    <a href="Tests/ControleurClientTests.java" title="ControleurClientTests">Lien vers la classe de test pour ControleurClient</a>.
    <a href="Tests/ControleurServiceTests.java" title="ControleurServiceTests">Lien vers la classe de test pour ControleurService</a>.

      <figure>
    <img src="images/JUnitTests.png" alt="Tests réussit" style="width:30%">
    <figcaption>
      <i>Figure 3.1 - Tests JUnit réussit.</i>
    </figcaption>
  </figure>
  </pre>



  <h2>Tâche 4 : Livraison et documentation</h2>
    Voici un lien vers le manuel d'utilisateur : <a href="Documentation/Manuel_utilisateur.pdf" title="Manuel d'utilisateur">lien</a>. <br>
    Voici un lien vers les JavaDocs : <a href="Documentation/JavaDocs/index.html" title="JavaDocs">lien</a>.

  <h2>Collaboration</h2>

  <figure>
    <img src="images/Statistiques_bitbucket_3.png" alt="Statistiques du dépôt BitBucket" style="width:80%">
    <figcaption>
      <i>Figure 5.1 - Statistiques du dépôt BitBucket</i>
    </figcaption>
  </figure> <br>


</body>

</html>
